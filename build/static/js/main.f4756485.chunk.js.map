{"version":3,"sources":["Components/Donate.js","Components/Rock_img.png","Components/Paper_img.png","Components/Scissors_img.png","Components/Attack.js","Components/AttackCard.js","Components/loading.png","Components/Outcome.js","Components/OutcomeCard.js","App.js","reportWebVitals.js","index.js"],"names":["Donate","props","useState","donationResult","setDonationResult","className","contractBalance","onClick","contract","methods","donate","send","from","defaultAccount","value","on","receipt","console","log","error","Attack","imageToDisplay","altText","attackNum","Rock_img","Paper_img","Scissors_img","src","e","attack","event","alert","play","onAttackSelectedHandler","alt","AttackCard","hand","Outcome","winMessage","ReturnImageToDisplay","num","Loading_img","outcome","playerAttack","computerAttack","OutcomeCard","App","contractAddress","setDefaultAccount","setContractBalance","matchOutcome","setMatchOutcome","setPlayerAttack","setComputerAttack","RPSContract","setRPSContract","connectionInd","setConnectionInd","useEffect","window","web3","events","emitOutcome","filter","player","returnValues","eth","getBalance","then","result","utils","fromWei","emitDonation","defaultAttackProps","ethereum","isMetaMask","Web3","Contract","contractABI","toString","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4756485.chunk.js","sourcesContent":["import './Donate.css'\nimport React, {useState} from 'react'\n\nfunction Donate(props) {\n\tconst [donationResult, setDonationResult] = useState(null);\n\n\tfunction SendDonation() {\n\t\tprops.contract.methods.donate().send({from: props.defaultAccount, value: 1000000000000000000})\n\t\t.on('receipt', function(receipt){\n\t\t\tconsole.log(receipt);\n\t\t\tsetDonationResult('Thanks for donating!')\n\t\t})\n\t\t.on('error', function(error){\n\t\t\tconsole.log(error);\n\t\t\tsetDonationResult('Probably gotta give a little more than that.');\n\t\t})\n\t\n\t}\n\t\n\treturn (\n\t<div className='DonateCard'> \n\t<div className='Balance'>\n\t<p> Ropsten Eth Balance: </p>\n\t<p>{props.contractBalance}</p>\n\t</div>\n\n\t<button onClick={SendDonation}> Donate 1 test Eth to the faucet </button>\n\t<p>{donationResult}</p>\n\t</div>\n\t)\n}\n\nexport default Donate;","export default __webpack_public_path__ + \"static/media/Rock_img.323e1f11.png\";","export default __webpack_public_path__ + \"static/media/Paper_img.7d2a44f8.png\";","export default __webpack_public_path__ + \"static/media/Scissors_img.4d6a4442.png\";","import Rock_img from './Rock_img.png'\nimport Paper_img from './Paper_img.png'\nimport Scissors_img from './Scissors_img.png'\nimport './Attack.css'\n\nfunction Attack(props) {\n\n\tfunction AttackClickHandler(attack){\n    // Only execute button logic if account is connected\n    if (props.defaultAccount != null) {\n      alert('Great Choice! Next you will confirm your MetaMask transation, then wait for block confirmation to see result');\n      props.contract.methods.play(attack).send({from: props.defaultAccount})\n      .on('error', function(error){\n    \t//console.log(error);\n    \t alert('Either the faucet is empty, or you aborted the transaction!');\n      })\n      .on('receipt', function(receipt){\n      \t//console.log(receipt);\n      });\n    } else {\n      alert('Connect wallet to play!');\n    }\n  }\n\n  // passes which hand was selected up to parent\n  const attackSelectedHandler = (event) => {\n    props.onAttackSelectedHandler(event);\n  }\n\n  // Set the image for the 'button' based on the attack number\n  // sets altText for alt image tags\n  let imageToDisplay;\n  let altText;\n  switch(props.attackNum){\n  \tcase 0:\n  \timageToDisplay = Rock_img;\n  \taltText = 'Rock attack selector';\n  \tbreak;\n  \tcase 1:\n  \timageToDisplay = Paper_img;\n  \taltText = 'Paper attack selector';\n  \tbreak;\n  \tcase 2:\n  \timageToDisplay = Scissors_img;\n  \taltText = 'Scissors attack selector';\n  \tbreak;\n  \tdefault:\n  \tbreak;\n  }\n\t\n\treturn (\n\t<div className='ImageWrapper'>\n\t<img className='AttackImage' src={imageToDisplay} onClick={e => {\n    AttackClickHandler(props.attackNum); \n    attackSelectedHandler(props.attackNum)}} alt={altText}/>\n\t</div>\n\t);\n}\n\nexport default Attack;","import Attack from './Attack';\nimport './AttackCard.css';\n\nfunction AttackCard(props) {\n\n\t// passes which hand was selected up to parent\n\tconst attackSelectedHandler = (event) => {\n\t\tprops.onAttackSelectedHandler(event);\n\t}\n\t\n\treturn (\n\t<div className='AttackCard'>\n\t<h3>Select your hand </h3>\n\t<Attack hand = {'Rock'} attackNum = {0} {...props} onAttackSelectedHandler={attackSelectedHandler} />\n\t<Attack hand = {'Paper'} attackNum = {1} {...props} />\n\t<Attack hand = {'Scissors'} attackNum = {2} {...props} />\n\t</div>\n\t);\n};\n\nexport default AttackCard;","export default __webpack_public_path__ + \"static/media/loading.51faa810.png\";","import Rock_img from './Rock_img.png'\nimport Paper_img from './Paper_img.png'\nimport Scissors_img from './Scissors_img.png'\nimport Loading_img from './loading.png'\n//import Rock_img_holder from './Rock_img_holder.png'\nimport './Outcome.css'\n\nfunction Outcome(props) {\n\n// if the player wins let them know they are getting test gwei sent to them\nlet winMessage;\nif (props.outcome === 'Player Wins') {\n\twinMessage = 'Sending you 1M test Gwei!';\n}\n\n\n\t  // Set the image for the 'button' based on the attack number\nfunction ReturnImageToDisplay(num){\n\tlet imageToDisplay;\n  switch(num){\n  \tcase '0':\n  \timageToDisplay = Rock_img;\n  \tbreak;\n  \tcase '1':\n  \timageToDisplay = Paper_img;\n  \tbreak;\n  \tcase '2':\n  \timageToDisplay = Scissors_img;\n  \tbreak;\n  \tcase '3':\n  \timageToDisplay = Loading_img;\n  \tdefault:\n  \t//imageToDisplay = Rock_img_holder;\n  \tbreak;\n  }\n  return imageToDisplay;\n}\n\n\treturn (\n\t\t<div className='OutcomeCard'>\n\t\t<div className='Hand'>\n\t\t<h3> Player </h3>\n\t\t<div className='HandHolder'>\n\t\t<img src={ReturnImageToDisplay(props.playerAttack)}/>\n\t\t</div>\n\t\t</div>\n\t\t<div className='Outcome'> <h3>Match Outcome </h3>\n\t\t<div className='OutcomeHolder'> <h3>{props.outcome}</h3> <p> {winMessage}</p> </div>\n\t\t</div>\n\t\t<div className='Hand'>\n\t\t<h3> Eth VM </h3>\n\t\t<div className='HandHolder'>\n\t\t<img src={ReturnImageToDisplay(props.computerAttack)}/>\n\t\t</div>\n\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Outcome;","import Outcome from './Outcome.js'\n\nfunction OutcomeCard(props){\n\n\treturn (\n\t\t<div>\n\t<Outcome outcome={props.outcome} playerAttack={props.playerAttack} computerAttack={props.computerAttack}/>\n\t</div>\n\t)\n}\n\nexport default OutcomeCard;","//import logo from './logo.svg';\nimport './App.css';\n//import Outcome from './Components/Outcome';\nimport Donate from './Components/Donate';\nimport AttackCard from './Components/AttackCard';\nimport OutcomeCard from './Components/OutcomeCard';\nimport Web3 from 'web3';\nimport React, {useState, useEffect} from 'react';\nimport contractABI from './ABI.json'  // Solidity contract ABI\n\nfunction App() {\n\n  // ROPSTEN ADDRESS = '0x266B6F8C7C823187d20FEBD47F684F348843501a'\n  // GANACHE-CLI address = '0x9F0a8af79eFE24c50fE4E6aF2308F928A75fa617'\n  const contractAddress = '0x266B6F8C7C823187d20FEBD47F684F348843501a';\n\n  // declare hook for setting the defaultAccount. App will re-render after calling setDefaultAccount(myNewDefaultAccount)\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [contractBalance, setContractBalance] = useState(null);\n\n  const [matchOutcome, setMatchOutcome] = useState(null);\n  const [playerAttack, setPlayerAttack] = useState(null);\n  const [computerAttack, setComputerAttack] = useState(null);\n\n  const [RPSContract, setRPSContract] = useState(null);\n\n  const [connectionInd, setConnectionInd] = useState(\"Connect Wallet\");\n\n  // initialize and set state of web3 and contract for uses in app\n  // initialize and set state of contract balance and default account\n  function loadAccount(){\n\n    if (window.ethereum && window.ethereum.isMetaMask) {\n      console.log('MetaMask detected');\n      window.web3 = new Web3(window.ethereum);\n      window.ethereum.send('eth_requestAccounts')\n      .then(function(result){\n        console.log(result.result[0]);\n        setDefaultAccount(result.result[0]);\n\n        // connection successful, connect wallet button will now display \"Connected\"\n        setConnectionInd(\"Connected\");\n\n    window.web3.eth.getBalance(contractAddress)\n    .then(function(result){\n    setContractBalance(window.web3.utils.fromWei(result));\n    });\n\n    setRPSContract(new window.web3.eth.Contract(contractABI, contractAddress));\n\n      })\n    } else {\n      alert(\"You need to install MetaMask to interact with this app\");\n    }\n  }\n\n  // initialize web3 and provider connection upon app load\n  useEffect(() => {\n    //loadAccount();\n  }, []);\n\n// Call when RPSContract is updated\n// sets the event listener and updates match outcome\n  useEffect(() => {\n\n    //checking for null values to prevent setting the event listener without values initialized\n    if(RPSContract !== null && defaultAccount !== null && window.web3 !== null) {\n\n      // listen for game outcomes where this user's address is the player, update outcome display values\n      RPSContract.events.emitOutcome({filter: {player: defaultAccount}}, function(error, event){\n      //console.log(event);\n      //console.log('event.returnValues.myDataPointName returned ' + event.returnValues.outcome);\n      setMatchOutcome(event.returnValues.outcome);\n      setPlayerAttack(event.returnValues.playerAttack);\n      setComputerAttack(event.returnValues.computerAttack);\n      //console.log('event player: ' + event.returnValues.player);\n      //console.log('dfAccount: ' + defaultAccount);\n    });\n\n      // listen to all outcome events, no filters. Update contract balance after each match played by anyone\n    RPSContract.events.emitOutcome({}, function(error, event){\n      window.web3.eth.getBalance(contractAddress)\n      .then(function(result){\n        setContractBalance(window.web3.utils.fromWei(result));\n      });\n    });\n\n      // update the contract balance whenever a donation event is emitted\n    RPSContract.events.emitDonation({}, function(error, event){\n      window.web3.eth.getBalance(contractAddress)\n      .then(function(result){\n        setContractBalance(window.web3.utils.fromWei(result));\n      });\n    });\n    }\n  }, [RPSContract, defaultAccount]);\n\n  // package props for attack buttons (same props for all buttons)\n  let defaultAttackProps = {\n    contract: RPSContract,\n    defaultAccount: defaultAccount\n  }\n\n  // recieves which attack was selected, allows for update on screen while waiting for block mined\n const attackSelectedHandler = (event) => {\n  setMatchOutcome('Waiting...')\n  setPlayerAttack(event.toString());\n  // loading icon in computer attack img\n  setComputerAttack('3');\n }\n\nreturn (\n<div>\n<div className='Title'> <h1> Play </h1> \n                        <h2> [Rock, Paper, Scissors] <button onClick={loadAccount}> {connectionInd} </button></h2> \n  </div>\n<div className='GameWrapper'>\n  <Donate contractBalance={contractBalance} {...defaultAttackProps}/>\n  <OutcomeCard outcome = {matchOutcome} playerAttack={playerAttack} computerAttack={computerAttack} />\n  <AttackCard {...defaultAttackProps} onAttackSelectedHandler={attackSelectedHandler}/>\n</div>\n<div>\n<p><a href='https://github.com/mikec3/TestEthFaucet'>GitHub</a></p>\n  <p> Donate to the creator: 0x07Fa7FBff22d6bBcC2f38A29F07B60ef5F4916b3 </p>\n</div>\n</div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}