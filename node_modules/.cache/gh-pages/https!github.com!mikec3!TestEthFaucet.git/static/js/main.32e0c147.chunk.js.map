{"version":3,"sources":["Components/Donate.js","Components/Rock_img.png","Components/Paper_img.png","Components/Scissors_img.png","Components/Attack.js","Components/AttackCard.js","Components/Outcome.js","Components/OutcomeCard.js","App.js","reportWebVitals.js","index.js"],"names":["Donate","props","useState","donationResult","setDonationResult","className","contractBalance","onClick","contract","methods","donate","send","from","defaultAccount","value","on","receipt","console","log","error","Attack","imageToDisplay","altText","attackNum","Rock_img","Paper_img","Scissors_img","src","e","attack","play","alert","alt","AttackCard","hand","Outcome","winMessage","ReturnImageToDisplay","num","outcome","playerAttack","computerAttack","OutcomeCard","App","contractAddress","setDefaultAccount","setContractBalance","matchOutcome","setMatchOutcome","setPlayerAttack","setComputerAttack","RPSContract","setRPSContract","WEB3","setWEB3","useEffect","web3","Web3","givenProvider","providers","WebsocketProvider","eth","getBalance","then","result","utils","fromWei","getAccounts","Contract","contractABI","loadAccount","events","emitOutcome","filter","player","event","returnValues","emitDonation","defaultAttackProps","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32e0c147.chunk.js","sourcesContent":["import './Donate.css'\nimport React, {useState} from 'react'\n\nfunction Donate(props) {\n\tconst [donationResult, setDonationResult] = useState(null);\n\n\tfunction SendDonation() {\n\t\tprops.contract.methods.donate().send({from: props.defaultAccount, value: 1000000000000000000})\n\t\t.on('receipt', function(receipt){\n\t\t\tconsole.log(receipt);\n\t\t\tsetDonationResult('Thanks for donating!')\n\t\t})\n\t\t.on('error', function(error){\n\t\t\tconsole.log(error);\n\t\t\tsetDonationResult('Probably gotta give a little more than that.');\n\t\t})\n\t\n\t}\n\t\n\treturn (\n\t<div className='DonateCard'> \n\t<p> Contract Balance: </p>\n\t<p>{props.contractBalance}</p>\n\n\t<button onClick={SendDonation}> Donate 1 test Eth to the faucet </button>\n\t<p>{donationResult}</p>\n\t</div>\n\t)\n}\n\nexport default Donate;","export default __webpack_public_path__ + \"static/media/Rock_img.323e1f11.png\";","export default __webpack_public_path__ + \"static/media/Paper_img.7d2a44f8.png\";","export default __webpack_public_path__ + \"static/media/Scissors_img.4d6a4442.png\";","import Rock_img from './Rock_img.png'\nimport Paper_img from './Paper_img.png'\nimport Scissors_img from './Scissors_img.png'\nimport './Attack.css'\n\nfunction Attack(props) {\n\n\tfunction AttackClickHandler(attack){\n    props.contract.methods.play(attack).send({from: props.defaultAccount})\n    .on('error', function(error){\n    \t//console.log(error);\n    \talert('You had a winning hand, but I think the faucet is empty!');\n    })\n    .on('receipt', function(receipt){\n    \t//console.log(receipt);\n    })\n  }\n\n  // Set the image for the 'button' based on the attack number\n  // sets altText for alt image tags\n  let imageToDisplay;\n  let altText;\n  switch(props.attackNum){\n  \tcase 0:\n  \timageToDisplay = Rock_img;\n  \taltText = 'Rock attack selector';\n  \tbreak;\n  \tcase 1:\n  \timageToDisplay = Paper_img;\n  \taltText = 'Paper attack selector';\n  \tbreak;\n  \tcase 2:\n  \timageToDisplay = Scissors_img;\n  \taltText = 'Scissors attack selector';\n  \tbreak;\n  \tdefault:\n  \tbreak;\n  }\n\t\n\treturn (\n\t<div className='ImageWrapper'>\n\t<img className='AttackImage' src={imageToDisplay} onClick={e => {AttackClickHandler(props.attackNum)}} alt={altText}/>\n\t</div>\n\t);\n}\n\nexport default Attack;","import Attack from './Attack';\nimport './AttackCard.css';\n\nfunction AttackCard(props) {\n\t\n\treturn (\n\t<div className='AttackCard'>\n\t<h3>Select your hand </h3>\n\t<Attack hand = {'Rock'} attackNum = {0} {...props}/>\n\t<Attack hand = {'Paper'} attackNum = {1} {...props}/>\n\t<Attack hand = {'Scissors'} attackNum = {2} {...props}/>\n\t</div>\n\t);\n};\n\nexport default AttackCard;","import Rock_img from './Rock_img.png'\nimport Paper_img from './Paper_img.png'\nimport Scissors_img from './Scissors_img.png'\nimport './Outcome.css'\n\nfunction Outcome(props) {\n\n// if the player wins let them know they are getting test gwei sent to them\nlet winMessage;\nif (props.outcome === 'Player Wins') {\n\twinMessage = 'Sending you 1M test gwei!';\n}\n\n\n\t  // Set the image for the 'button' based on the attack number\nfunction ReturnImageToDisplay(num){\n\tlet imageToDisplay;\n  switch(num){\n  \tcase '0':\n  \timageToDisplay = Rock_img;\n  \tbreak;\n  \tcase '1':\n  \timageToDisplay = Paper_img;\n  \tbreak;\n  \tcase '2':\n  \timageToDisplay = Scissors_img;\n  \tbreak;\n  \tdefault:\n  \tbreak;\n  }\n  return imageToDisplay;\n}\n\n\treturn (\n\t\t<div className='OutcomeCard'>\n\t\t<div className='Hand'>\n\t\t<h3> Player </h3>\n\t\t<img src={ReturnImageToDisplay(props.playerAttack)}/>\n\t\t</div>\n\t\t<div className='Outcome'> <h3>Match Outcome </h3>\n\t\t<div> <h3>{props.outcome}</h3> <p> {winMessage}</p> </div>\n\t\t</div>\n\t\t<div className='Hand'>\n\t\t<h3> Eth VM </h3>\n\t\t<img src={ReturnImageToDisplay(props.computerAttack)}/>\n\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Outcome;","import Outcome from './Outcome.js'\n\nfunction OutcomeCard(props){\n\n\treturn (\n\t<Outcome outcome={props.outcome} playerAttack={props.playerAttack} computerAttack={props.computerAttack}/>\n\t)\n}\n\nexport default OutcomeCard;","//import logo from './logo.svg';\nimport './App.css';\n//import Outcome from './Components/Outcome';\nimport Donate from './Components/Donate';\nimport AttackCard from './Components/AttackCard';\nimport OutcomeCard from './Components/OutcomeCard';\nimport Web3 from 'web3';\nimport React, {useState, useEffect} from 'react';\nimport contractABI from './ABI.json'  // Solidity contract ABI\n\nfunction App() {\n\n  const contractAddress = '0x5852ddEc9e0726Fe69935481804A7d0b21934E85';\n\n  // declare hook for setting the defaultAccount. App will re-render after calling setDefaultAccount(myNewDefaultAccount)\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [contractBalance, setContractBalance] = useState(null);\n\n  const [matchOutcome, setMatchOutcome] = useState(null);\n  const [playerAttack, setPlayerAttack] = useState(null);\n  const [computerAttack, setComputerAttack] = useState(null);\n\n  const [RPSContract, setRPSContract] = useState(null);\n\n  const [WEB3, setWEB3] = useState(null);\n\n  // initialize and set state of web3 and contract for uses in app\n  // initialize and set state of contract balance and default account\n  function loadAccount(){\n\n    let web3;\n\n    if(typeof web3 !== 'undefined'){\n      web3 = new Web3(Web3.givenProvider);\n      setWEB3(web3);\n    } else {\n      // IMPORTANT!!\n      // USED WebsocketProvider instead of httpProvider due to event listening only happening on ws\n      web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n      setWEB3(web3);\n    }\n\n    web3.eth.getBalance(contractAddress)\n    .then(function(result){\n      setContractBalance(web3.utils.fromWei(result));\n    });\n\n    web3.eth.getAccounts()\n    .then(function(result){\n      setDefaultAccount(result[0]);\n    });\n\n    setRPSContract(new web3.eth.Contract(contractABI, contractAddress));\n  }\n\n  // initialize web3 and provider connection upon app load\n  useEffect(() => {\n    loadAccount();\n  }, []);\n\n// Call when RPSContract is updated\n// sets the event listener and updates match outcome\n  useEffect(() => {\n\n    //checking for null values to prevent setting the event listener without values initialized\n    if(RPSContract !== null && defaultAccount !== null && WEB3 !== null) {\n\n      // listen for game outcomes where this user's address is the player, update outcome display values\n      RPSContract.events.emitOutcome({filter: {player: defaultAccount}}, function(error, event){\n      //console.log(event);\n      //console.log('event.returnValues.myDataPointName returned ' + event.returnValues.outcome);\n      setMatchOutcome(event.returnValues.outcome);\n      setPlayerAttack(event.returnValues.playerAttack);\n      setComputerAttack(event.returnValues.computerAttack);\n      //console.log('event player: ' + event.returnValues.player);\n      //console.log('dfAccount: ' + defaultAccount);\n    });\n\n      // listen to all outcome events, no filters. Update contract balance after each match played by anyone\n    RPSContract.events.emitOutcome({}, function(error, event){\n      WEB3.eth.getBalance(contractAddress)\n      .then(function(result){\n        setContractBalance(WEB3.utils.fromWei(result));\n      });\n    });\n\n      // update the contract balance whenever a donation event is emitted\n    RPSContract.events.emitDonation({}, function(error, event){\n      WEB3.eth.getBalance(contractAddress)\n      .then(function(result){\n        setContractBalance(WEB3.utils.fromWei(result));\n      });\n    });\n    }\n  }, [RPSContract, defaultAccount, WEB3]);\n\n  // package props for attack buttons (same props for all buttons)\n  let defaultAttackProps = {\n    contract: RPSContract,\n    defaultAccount: defaultAccount\n  }\n\nreturn (\n<div>\n<div className='Title'> <h2> Play Rock Paper Scissors for Rinkby Test Eth! </h2> \n  <p> Win to receive test Eth! </p>\n  </div>\n<div className='GameWrapper'>\n  <Donate contractBalance={contractBalance} {...defaultAttackProps}/>\n  <OutcomeCard outcome = {matchOutcome} playerAttack={playerAttack} computerAttack={computerAttack} />\n  <AttackCard {...defaultAttackProps}/>\n</div>\n<div>\n  <p> Donate to the creator: 0x07Fa7FBff22d6bBcC2f38A29F07B60ef5F4916b3 </p>\n  <a href='https://github.com/mikec3/TestEthFaucet'>GitHub</a>\n</div>\n</div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}