{"ast":null,"code":"var _jsxFileName = \"/Users/michaelcouch/Documents/Ethereum/Mike_and_Tony/rock_paper_scissors_v2/react_rps/src/Components/Attack.js\";\nimport Rock_img from './Rock_img.png';\nimport Paper_img from './Paper_img.png';\nimport Scissors_img from './Scissors_img.png';\nimport './Attack.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Attack(props) {\n  function AttackClickHandler(attack) {\n    //empty the error message first. That way it auto-resets after funds are added back\n    setErrorMessage('');\n    props.contract.methods.play(attack).send({\n      from: props.defaultAccount\n    }).on('error', function (error) {\n      //console.log(error);\n      alert('You had a winning hand, but I think the faucet is empty!');\n    }).on('receipt', function (receipt) {//console.log(receipt);\n    });\n  } // Set the image for the 'button' based on the attack number\n\n\n  let imageToDisplay;\n\n  switch (props.attackNum) {\n    case 0:\n      imageToDisplay = Rock_img;\n      break;\n\n    case 1:\n      imageToDisplay = Paper_img;\n      break;\n\n    case 2:\n      imageToDisplay = Scissors_img;\n      break;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ImageWrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"AttackImage\",\n      src: imageToDisplay,\n      onClick: e => {\n        AttackClickHandler(props.attackNum);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 2\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 2\n  }, this);\n}\n\n_c = Attack;\nexport default Attack;\n\nvar _c;\n\n$RefreshReg$(_c, \"Attack\");","map":{"version":3,"sources":["/Users/michaelcouch/Documents/Ethereum/Mike_and_Tony/rock_paper_scissors_v2/react_rps/src/Components/Attack.js"],"names":["Rock_img","Paper_img","Scissors_img","React","useState","useEffect","Attack","props","AttackClickHandler","attack","setErrorMessage","contract","methods","play","send","from","defaultAccount","on","error","alert","receipt","imageToDisplay","attackNum","e"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAO,cAAP;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAEtB,WAASC,kBAAT,CAA4BC,MAA5B,EAAmC;AACnC;AACAC,IAAAA,eAAe,CAAC,EAAD,CAAf;AACGH,IAAAA,KAAK,CAACI,QAAN,CAAeC,OAAf,CAAuBC,IAAvB,CAA4BJ,MAA5B,EAAoCK,IAApC,CAAyC;AAACC,MAAAA,IAAI,EAAER,KAAK,CAACS;AAAb,KAAzC,EACCC,EADD,CACI,OADJ,EACa,UAASC,KAAT,EAAe;AAC3B;AACAC,MAAAA,KAAK,CAAC,0DAAD,CAAL;AACA,KAJD,EAKCF,EALD,CAKI,SALJ,EAKe,UAASG,OAAT,EAAiB,CAC/B;AACA,KAPD;AAQD,GAboB,CAerB;;;AACA,MAAIC,cAAJ;;AACA,UAAOd,KAAK,CAACe,SAAb;AACC,SAAK,CAAL;AACAD,MAAAA,cAAc,GAAGrB,QAAjB;AACA;;AACA,SAAK,CAAL;AACAqB,MAAAA,cAAc,GAAGpB,SAAjB;AACA;;AACA,SAAK,CAAL;AACAoB,MAAAA,cAAc,GAAGnB,YAAjB;AACA;AATD;;AAYD,sBACA;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,GAAG,EAAEmB,cAAlC;AAAkD,MAAA,OAAO,EAAEE,CAAC,IAAI;AAACf,QAAAA,kBAAkB,CAACD,KAAK,CAACe,SAAP,CAAlB;AAAoC;AAArG;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADA;AAKA;;KAlCQhB,M;AAoCT,eAAeA,MAAf","sourcesContent":["import Rock_img from './Rock_img.png'\nimport Paper_img from './Paper_img.png'\nimport Scissors_img from './Scissors_img.png'\nimport './Attack.css'\nimport React, {useState, useEffect} from 'react';\n\nfunction Attack(props) {\n\n\tfunction AttackClickHandler(attack){\n\t//empty the error message first. That way it auto-resets after funds are added back\n\tsetErrorMessage('');\n    props.contract.methods.play(attack).send({from: props.defaultAccount})\n    .on('error', function(error){\n    \t//console.log(error);\n    \talert('You had a winning hand, but I think the faucet is empty!');\n    })\n    .on('receipt', function(receipt){\n    \t//console.log(receipt);\n    })\n  }\n\n  // Set the image for the 'button' based on the attack number\n  let imageToDisplay;\n  switch(props.attackNum){\n  \tcase 0:\n  \timageToDisplay = Rock_img;\n  \tbreak;\n  \tcase 1:\n  \timageToDisplay = Paper_img;\n  \tbreak;\n  \tcase 2:\n  \timageToDisplay = Scissors_img;\n  \tbreak;\n  }\n\t\n\treturn (\n\t<div className='ImageWrapper'>\n\t<img className='AttackImage' src={imageToDisplay} onClick={e => {AttackClickHandler(props.attackNum)}}/>\n\t</div>\n\t);\n}\n\nexport default Attack;"]},"metadata":{},"sourceType":"module"}