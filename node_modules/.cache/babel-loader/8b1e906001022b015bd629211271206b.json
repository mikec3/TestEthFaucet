{"ast":null,"code":"var _jsxFileName = \"/Users/michaelcouch/Documents/Ethereum/Mike_and_Tony/testEthFaucet/TestEthFaucet/src/Components/Attack.js\";\nimport Rock_img from './Rock_img.png';\nimport Paper_img from './Paper_img.png';\nimport Scissors_img from './Scissors_img.png';\nimport './Attack.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Attack(props) {\n  function AttackClickHandler(attack) {\n    // Only execute button logic if account is connected\n    if (props.defaultAccount != null) {\n      alert('Great Choice! Next you will confirm your MetaMask transation, then wait for block confirmation to see result');\n      props.contract.methods.play(attack).send({\n        from: props.defaultAccount\n      }).on('error', function (error) {\n        //console.log(error);\n        alert('Either the faucet is empty, or you aborted the transaction!');\n      }).on('receipt', function (receipt) {//console.log(receipt);\n      });\n    } else {\n      alert('Connect Wallet to Play!');\n    }\n  } // Set the image for the 'button' based on the attack number\n  // sets altText for alt image tags\n\n\n  let imageToDisplay;\n  let altText;\n\n  switch (props.attackNum) {\n    case 0:\n      imageToDisplay = Rock_img;\n      altText = 'Rock attack selector';\n      break;\n\n    case 1:\n      imageToDisplay = Paper_img;\n      altText = 'Paper attack selector';\n      break;\n\n    case 2:\n      imageToDisplay = Scissors_img;\n      altText = 'Scissors attack selector';\n      break;\n\n    default:\n      break;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ImageWrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"AttackImage\",\n      src: imageToDisplay,\n      onClick: e => {\n        AttackClickHandler(props.attackNum);\n      },\n      alt: altText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 2\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 2\n  }, this);\n}\n\n_c = Attack;\nexport default Attack;\n\nvar _c;\n\n$RefreshReg$(_c, \"Attack\");","map":{"version":3,"sources":["/Users/michaelcouch/Documents/Ethereum/Mike_and_Tony/testEthFaucet/TestEthFaucet/src/Components/Attack.js"],"names":["Rock_img","Paper_img","Scissors_img","Attack","props","AttackClickHandler","attack","defaultAccount","alert","contract","methods","play","send","from","on","error","receipt","imageToDisplay","altText","attackNum","e"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAO,cAAP;;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAEtB,WAASC,kBAAT,CAA4BC,MAA5B,EAAmC;AAChC;AACA,QAAIF,KAAK,CAACG,cAAN,IAAwB,IAA5B,EAAkC;AAChCC,MAAAA,KAAK,CAAC,8GAAD,CAAL;AACAJ,MAAAA,KAAK,CAACK,QAAN,CAAeC,OAAf,CAAuBC,IAAvB,CAA4BL,MAA5B,EAAoCM,IAApC,CAAyC;AAACC,QAAAA,IAAI,EAAET,KAAK,CAACG;AAAb,OAAzC,EACCO,EADD,CACI,OADJ,EACa,UAASC,KAAT,EAAe;AAC7B;AACCP,QAAAA,KAAK,CAAC,6DAAD,CAAL;AACC,OAJD,EAKCM,EALD,CAKI,SALJ,EAKe,UAASE,OAAT,EAAiB,CAC/B;AACA,OAPD;AAQD,KAVD,MAUO;AACLR,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACD;AACF,GAjBoB,CAmBrB;AACA;;;AACA,MAAIS,cAAJ;AACA,MAAIC,OAAJ;;AACA,UAAOd,KAAK,CAACe,SAAb;AACC,SAAK,CAAL;AACAF,MAAAA,cAAc,GAAGjB,QAAjB;AACAkB,MAAAA,OAAO,GAAG,sBAAV;AACA;;AACA,SAAK,CAAL;AACAD,MAAAA,cAAc,GAAGhB,SAAjB;AACAiB,MAAAA,OAAO,GAAG,uBAAV;AACA;;AACA,SAAK,CAAL;AACAD,MAAAA,cAAc,GAAGf,YAAjB;AACAgB,MAAAA,OAAO,GAAG,0BAAV;AACA;;AACA;AACA;AAdD;;AAiBD,sBACA;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,GAAG,EAAED,cAAlC;AAAkD,MAAA,OAAO,EAAEG,CAAC,IAAI;AAACf,QAAAA,kBAAkB,CAACD,KAAK,CAACe,SAAP,CAAlB;AAAoC,OAArG;AAAuG,MAAA,GAAG,EAAED;AAA5G;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADA;AAKA;;KA7CQf,M;AA+CT,eAAeA,MAAf","sourcesContent":["import Rock_img from './Rock_img.png'\nimport Paper_img from './Paper_img.png'\nimport Scissors_img from './Scissors_img.png'\nimport './Attack.css'\n\nfunction Attack(props) {\n\n\tfunction AttackClickHandler(attack){\n    // Only execute button logic if account is connected\n    if (props.defaultAccount != null) {\n      alert('Great Choice! Next you will confirm your MetaMask transation, then wait for block confirmation to see result');\n      props.contract.methods.play(attack).send({from: props.defaultAccount})\n      .on('error', function(error){\n    \t//console.log(error);\n    \t alert('Either the faucet is empty, or you aborted the transaction!');\n      })\n      .on('receipt', function(receipt){\n      \t//console.log(receipt);\n      });\n    } else {\n      alert('Connect Wallet to Play!');\n    }\n  }\n\n  // Set the image for the 'button' based on the attack number\n  // sets altText for alt image tags\n  let imageToDisplay;\n  let altText;\n  switch(props.attackNum){\n  \tcase 0:\n  \timageToDisplay = Rock_img;\n  \taltText = 'Rock attack selector';\n  \tbreak;\n  \tcase 1:\n  \timageToDisplay = Paper_img;\n  \taltText = 'Paper attack selector';\n  \tbreak;\n  \tcase 2:\n  \timageToDisplay = Scissors_img;\n  \taltText = 'Scissors attack selector';\n  \tbreak;\n  \tdefault:\n  \tbreak;\n  }\n\t\n\treturn (\n\t<div className='ImageWrapper'>\n\t<img className='AttackImage' src={imageToDisplay} onClick={e => {AttackClickHandler(props.attackNum)}} alt={altText}/>\n\t</div>\n\t);\n}\n\nexport default Attack;"]},"metadata":{},"sourceType":"module"}