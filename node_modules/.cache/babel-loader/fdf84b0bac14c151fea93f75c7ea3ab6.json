{"ast":null,"code":"var _jsxFileName = \"/Users/michaelcouch/Documents/Ethereum/Mike_and_Tony/rock_paper_scissors_v2/react_rps/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Account from './Components/Account';\nimport Outcome from './Components/Outcome';\nimport AttackCard from './Components/AttackCard';\nimport OutcomeCard from './Components/OutcomeCard';\nimport Web3 from 'web3';\nimport React, { useState, useEffect } from 'react';\nimport contractABI from './ABI.json'; // Solidity contract ABI\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const contractAddress = '0x82E52BCa181e6f047dde14e259FB070f3E1D81d5'; // declare hook for setting the defaultAccount. App will re-render after calling setDefaultAccount(myNewDefaultAccount)\n\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [contractBalance, setContractBalance] = useState(null);\n  const [matchOutcome, setMatchOutcome] = useState(null);\n  const [playerAttack, setPlayerAttack] = useState(null);\n  const [computerAttack, setComputerAttack] = useState(null);\n  const [RPSContract, setRPSContract] = useState(null);\n\n  function loadAccount() {\n    let web3;\n\n    if (typeof web3 !== 'undefined') {\n      web3 = new Web3(Web3.givenProvider);\n    } else {\n      // IMPORTANT!!\n      // USED WebsocketProvider instead of httpProvider due to event listening only happening on ws\n      web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n    }\n\n    web3.eth.getBalance();\n    web3.eth.getAccounts().then(function (result) {\n      setDefaultAccount(result[0]);\n    });\n    setRPSContract(new web3.eth.Contract(contractABI, contractAddress));\n  } // initialize web3 and provider connection upon app load\n\n\n  useEffect(() => {\n    loadAccount();\n  }, []); // Call when RPSContract is updated\n  // sets the event listener and updates match outcome\n\n  useEffect(() => {\n    console.log(RPSContract); // TODO push this into it's own outcome display component and show player/computer attacks\n    //checking for null values to prevent setting the event listener without values initialized\n\n    if (RPSContract !== null && defaultAccount !== null) {\n      console.log('Account: ' + defaultAccount);\n      RPSContract.events.emitOutcome({\n        filter: {\n          player: defaultAccount\n        }\n      }, function (error, event) {\n        //console.log(event);\n        //console.log('event.returnValues.myDataPointName returned ' + event.returnValues.outcome);\n        setMatchOutcome(event.returnValues.outcome);\n        setPlayerAttack(event.returnValues.playerAttack);\n        setComputerAttack(event.returnValues.computerAttack);\n        console.log('event player: ' + event.returnValues.player);\n        console.log('dfAccount: ' + defaultAccount);\n      });\n    }\n  }, [RPSContract, defaultAccount]); // package props for attack buttons (same props for all buttons)\n\n  let defaultAttackProps = {\n    contract: RPSContract,\n    defaultAccount: defaultAccount\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Account, {\n      defaultAccount: defaultAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Title\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Play Rock Paper Scissors for Rinkby Test Eth! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"GameWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(OutcomeCard, {\n        outcome: matchOutcome,\n        playerAttack: playerAttack,\n        computerAttack: computerAttack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(AttackCard, { ...defaultAttackProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 1\n  }, this);\n}\n\n_s(App, \"N941AcBJCvim3VdcEF5Ph2Sm+OM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/michaelcouch/Documents/Ethereum/Mike_and_Tony/rock_paper_scissors_v2/react_rps/src/App.js"],"names":["Account","Outcome","AttackCard","OutcomeCard","Web3","React","useState","useEffect","contractABI","App","contractAddress","defaultAccount","setDefaultAccount","contractBalance","setContractBalance","matchOutcome","setMatchOutcome","playerAttack","setPlayerAttack","computerAttack","setComputerAttack","RPSContract","setRPSContract","loadAccount","web3","givenProvider","providers","WebsocketProvider","eth","getBalance","getAccounts","then","result","Contract","console","log","events","emitOutcome","filter","player","error","event","returnValues","outcome","defaultAttackProps","contract"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport Account from './Components/Account';\nimport Outcome from './Components/Outcome';\nimport AttackCard from './Components/AttackCard';\nimport OutcomeCard from './Components/OutcomeCard';\nimport Web3 from 'web3';\nimport React, {useState, useEffect} from 'react';\nimport contractABI from './ABI.json'  // Solidity contract ABI\n\nfunction App() {\n\n  const contractAddress = '0x82E52BCa181e6f047dde14e259FB070f3E1D81d5'\n\n  // declare hook for setting the defaultAccount. App will re-render after calling setDefaultAccount(myNewDefaultAccount)\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [contractBalance, setContractBalance] = useState(null);\n\n  const [matchOutcome, setMatchOutcome] = useState(null);\n  const [playerAttack, setPlayerAttack] = useState(null);\n  const [computerAttack, setComputerAttack] = useState(null);\n\n  const [RPSContract, setRPSContract] = useState(null);\n\n  function loadAccount(){\n\n    let web3;\n\n    if(typeof web3 !== 'undefined'){\n      web3 = new Web3(Web3.givenProvider);\n    } else {\n      // IMPORTANT!!\n      // USED WebsocketProvider instead of httpProvider due to event listening only happening on ws\n      web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n    }\n\n    web3.eth.getBalance()\n\n    web3.eth.getAccounts()\n    .then(function(result){\n      setDefaultAccount(result[0]);\n    });\n\n    setRPSContract(new web3.eth.Contract(contractABI, contractAddress));\n  }\n\n  // initialize web3 and provider connection upon app load\n  useEffect(() => {\n    loadAccount();\n  }, []);\n\n// Call when RPSContract is updated\n// sets the event listener and updates match outcome\n  useEffect(() => {\n    console.log(RPSContract);\n\n    // TODO push this into it's own outcome display component and show player/computer attacks\n    //checking for null values to prevent setting the event listener without values initialized\n    if(RPSContract !== null && defaultAccount !== null) {\n      console.log('Account: ' +defaultAccount)\n          RPSContract.events.emitOutcome({filter: {player: defaultAccount}}, function(error, event){\n      //console.log(event);\n      //console.log('event.returnValues.myDataPointName returned ' + event.returnValues.outcome);\n      setMatchOutcome(event.returnValues.outcome);\n      setPlayerAttack(event.returnValues.playerAttack);\n      setComputerAttack(event.returnValues.computerAttack);\n      console.log('event player: ' + event.returnValues.player);\n      console.log('dfAccount: ' + defaultAccount);\n    });\n    }\n  }, [RPSContract, defaultAccount]);\n\n  // package props for attack buttons (same props for all buttons)\n  let defaultAttackProps = {\n    contract: RPSContract,\n    defaultAccount: defaultAccount\n  }\n\nreturn (\n<div>\n<Account defaultAccount = {defaultAccount}/>\n<div className='Title'> <h2> Play Rock Paper Scissors for Rinkby Test Eth! </h2> </div>\n<div className='GameWrapper'>\n<OutcomeCard outcome = {matchOutcome} playerAttack={playerAttack} computerAttack={computerAttack} />\n<AttackCard {...defaultAttackProps}/>\n</div>\n</div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}