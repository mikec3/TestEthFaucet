{"ast":null,"code":"import Rock_img from'./Rock_img.png';import Paper_img from'./Paper_img.png';import Scissors_img from'./Scissors_img.png';import'./Attack.css';import{jsx as _jsx}from\"react/jsx-runtime\";function Attack(props){function AttackClickHandler(attack){// Only execute button logic if account is connected\nif(props.defaultAccount!=null){alert('Great Choice! Next you will confirm your MetaMask transation, then wait for block confirmation to see result');props.contract.methods.play(attack).send({from:props.defaultAccount}).on('error',function(error){//console.log(error);\nalert('Either the faucet is empty, or you aborted the transaction!');}).on('receipt',function(receipt){//console.log(receipt);\n});}else{alert('Connect wallet to play!');}}// Set the image for the 'button' based on the attack number\n// sets altText for alt image tags\nvar imageToDisplay;var altText;switch(props.attackNum){case 0:imageToDisplay=Rock_img;altText='Rock attack selector';break;case 1:imageToDisplay=Paper_img;altText='Paper attack selector';break;case 2:imageToDisplay=Scissors_img;altText='Scissors attack selector';break;default:break;}return/*#__PURE__*/_jsx(\"div\",{className:\"ImageWrapper\",children:/*#__PURE__*/_jsx(\"img\",{className:\"AttackImage\",src:imageToDisplay,onClick:function onClick(e){AttackClickHandler(props.attackNum);},alt:altText})});}export default Attack;","map":{"version":3,"sources":["/Users/michaelcouch/Documents/Ethereum/Mike_and_Tony/testEthFaucet/TestEthFaucet/src/Components/Attack.js"],"names":["Rock_img","Paper_img","Scissors_img","Attack","props","AttackClickHandler","attack","defaultAccount","alert","contract","methods","play","send","from","on","error","receipt","imageToDisplay","altText","attackNum","e"],"mappings":"AAAA,MAAOA,CAAAA,QAAP,KAAqB,gBAArB,CACA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,CACA,MAAOC,CAAAA,YAAP,KAAyB,oBAAzB,CACA,MAAO,cAAP,C,2CAEA,QAASC,CAAAA,MAAT,CAAgBC,KAAhB,CAAuB,CAEtB,QAASC,CAAAA,kBAAT,CAA4BC,MAA5B,CAAmC,CAChC;AACA,GAAIF,KAAK,CAACG,cAAN,EAAwB,IAA5B,CAAkC,CAChCC,KAAK,CAAC,8GAAD,CAAL,CACAJ,KAAK,CAACK,QAAN,CAAeC,OAAf,CAAuBC,IAAvB,CAA4BL,MAA5B,EAAoCM,IAApC,CAAyC,CAACC,IAAI,CAAET,KAAK,CAACG,cAAb,CAAzC,EACCO,EADD,CACI,OADJ,CACa,SAASC,KAAT,CAAe,CAC7B;AACCP,KAAK,CAAC,6DAAD,CAAL,CACC,CAJD,EAKCM,EALD,CAKI,SALJ,CAKe,SAASE,OAAT,CAAiB,CAC/B;AACA,CAPD,EAQD,CAVD,IAUO,CACLR,KAAK,CAAC,yBAAD,CAAL,CACD,CACF,CAED;AACA;AACA,GAAIS,CAAAA,cAAJ,CACA,GAAIC,CAAAA,OAAJ,CACA,OAAOd,KAAK,CAACe,SAAb,EACC,IAAK,EAAL,CACAF,cAAc,CAAGjB,QAAjB,CACAkB,OAAO,CAAG,sBAAV,CACA,MACA,IAAK,EAAL,CACAD,cAAc,CAAGhB,SAAjB,CACAiB,OAAO,CAAG,uBAAV,CACA,MACA,IAAK,EAAL,CACAD,cAAc,CAAGf,YAAjB,CACAgB,OAAO,CAAG,0BAAV,CACA,MACA,QACA,MAdD,CAiBD,mBACA,YAAK,SAAS,CAAC,cAAf,uBACA,YAAK,SAAS,CAAC,aAAf,CAA6B,GAAG,CAAED,cAAlC,CAAkD,OAAO,CAAE,iBAAAG,CAAC,CAAI,CAACf,kBAAkB,CAACD,KAAK,CAACe,SAAP,CAAlB,CAAoC,CAArG,CAAuG,GAAG,CAAED,OAA5G,EADA,EADA,CAKA,CAED,cAAef,CAAAA,MAAf","sourcesContent":["import Rock_img from './Rock_img.png'\nimport Paper_img from './Paper_img.png'\nimport Scissors_img from './Scissors_img.png'\nimport './Attack.css'\n\nfunction Attack(props) {\n\n\tfunction AttackClickHandler(attack){\n    // Only execute button logic if account is connected\n    if (props.defaultAccount != null) {\n      alert('Great Choice! Next you will confirm your MetaMask transation, then wait for block confirmation to see result');\n      props.contract.methods.play(attack).send({from: props.defaultAccount})\n      .on('error', function(error){\n    \t//console.log(error);\n    \t alert('Either the faucet is empty, or you aborted the transaction!');\n      })\n      .on('receipt', function(receipt){\n      \t//console.log(receipt);\n      });\n    } else {\n      alert('Connect wallet to play!');\n    }\n  }\n\n  // Set the image for the 'button' based on the attack number\n  // sets altText for alt image tags\n  let imageToDisplay;\n  let altText;\n  switch(props.attackNum){\n  \tcase 0:\n  \timageToDisplay = Rock_img;\n  \taltText = 'Rock attack selector';\n  \tbreak;\n  \tcase 1:\n  \timageToDisplay = Paper_img;\n  \taltText = 'Paper attack selector';\n  \tbreak;\n  \tcase 2:\n  \timageToDisplay = Scissors_img;\n  \taltText = 'Scissors attack selector';\n  \tbreak;\n  \tdefault:\n  \tbreak;\n  }\n\t\n\treturn (\n\t<div className='ImageWrapper'>\n\t<img className='AttackImage' src={imageToDisplay} onClick={e => {AttackClickHandler(props.attackNum)}} alt={altText}/>\n\t</div>\n\t);\n}\n\nexport default Attack;"]},"metadata":{},"sourceType":"module"}