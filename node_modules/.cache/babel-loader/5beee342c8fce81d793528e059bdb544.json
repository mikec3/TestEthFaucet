{"ast":null,"code":"import _objectSpread from\"/Users/michaelcouch/Documents/Ethereum/Mike_and_Tony/testEthFaucet/TestEthFaucet/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/michaelcouch/Documents/Ethereum/Mike_and_Tony/testEthFaucet/TestEthFaucet/node_modules/@babel/runtime/helpers/esm/slicedToArray\";//import logo from './logo.svg';\nimport'./App.css';//import Outcome from './Components/Outcome';\nimport Donate from'./Components/Donate';import AttackCard from'./Components/AttackCard';import OutcomeCard from'./Components/OutcomeCard';import Web3 from'web3';import React,{useState,useEffect}from'react';import contractABI from'./ABI.json';// Solidity contract ABI\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var contractAddress='0x5852ddEc9e0726Fe69935481804A7d0b21934E85';// declare hook for setting the defaultAccount. App will re-render after calling setDefaultAccount(myNewDefaultAccount)\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),defaultAccount=_useState2[0],setDefaultAccount=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),contractBalance=_useState4[0],setContractBalance=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),matchOutcome=_useState6[0],setMatchOutcome=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),playerAttack=_useState8[0],setPlayerAttack=_useState8[1];var _useState9=useState(null),_useState10=_slicedToArray(_useState9,2),computerAttack=_useState10[0],setComputerAttack=_useState10[1];var _useState11=useState(null),_useState12=_slicedToArray(_useState11,2),RPSContract=_useState12[0],setRPSContract=_useState12[1];var _useState13=useState(null),_useState14=_slicedToArray(_useState13,2),WEB3=_useState14[0],setWEB3=_useState14[1];// initialize and set state of web3 and contract for uses in app\n// initialize and set state of contract balance and default account\nfunction loadAccount(){var web3;if(typeof web3!=='undefined'){web3=new Web3(Web3.givenProvider);setWEB3(web3);}else{// IMPORTANT!!\n// USED WebsocketProvider instead of httpProvider due to event listening only happening on ws\nweb3=new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));setWEB3(web3);}web3.eth.getBalance(contractAddress).then(function(result){setContractBalance(web3.utils.fromWei(result));});web3.eth.getAccounts().then(function(result){setDefaultAccount(result[0]);});setRPSContract(new web3.eth.Contract(contractABI,contractAddress));}// initialize web3 and provider connection upon app load\nuseEffect(function(){loadAccount();},[]);// Call when RPSContract is updated\n// sets the event listener and updates match outcome\nuseEffect(function(){//checking for null values to prevent setting the event listener without values initialized\nif(RPSContract!==null&&defaultAccount!==null&&WEB3!==null){// listen for game outcomes where this user's address is the player, update outcome display values\nRPSContract.events.emitOutcome({filter:{player:defaultAccount}},function(error,event){//console.log(event);\n//console.log('event.returnValues.myDataPointName returned ' + event.returnValues.outcome);\nsetMatchOutcome(event.returnValues.outcome);setPlayerAttack(event.returnValues.playerAttack);setComputerAttack(event.returnValues.computerAttack);//console.log('event player: ' + event.returnValues.player);\n//console.log('dfAccount: ' + defaultAccount);\n});// listen to all outcome events, no filters. Update contract balance after each match played by anyone\nRPSContract.events.emitOutcome({},function(error,event){WEB3.eth.getBalance(contractAddress).then(function(result){setContractBalance(WEB3.utils.fromWei(result));});});// update the contract balance whenever a donation event is emitted\nRPSContract.events.emitDonation({},function(error,event){WEB3.eth.getBalance(contractAddress).then(function(result){setContractBalance(WEB3.utils.fromWei(result));});});}},[RPSContract,defaultAccount,WEB3]);// package props for attack buttons (same props for all buttons)\nvar defaultAttackProps={contract:RPSContract,defaultAccount:defaultAccount};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"Title\",children:[\" \",/*#__PURE__*/_jsx(\"h2\",{children:\" Play Rock Paper Scissors for Rinkby Test Eth! \"}),/*#__PURE__*/_jsx(\"p\",{children:\" Win to receive test Eth! \"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"GameWrapper\",children:[/*#__PURE__*/_jsx(Donate,_objectSpread({contractBalance:contractBalance},defaultAttackProps)),/*#__PURE__*/_jsx(OutcomeCard,{outcome:matchOutcome,playerAttack:playerAttack,computerAttack:computerAttack}),/*#__PURE__*/_jsx(AttackCard,_objectSpread({},defaultAttackProps))]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\" Donate to the creator: 0x07Fa7FBff22d6bBcC2f38A29F07B60ef5F4916b3 \"}),/*#__PURE__*/_jsx(\"a\",{href:\"https://github.com/mikec3/TestEthFaucet\",children:\"GitHub\"})]})]});}export default App;","map":{"version":3,"sources":["/Users/michaelcouch/Documents/Ethereum/Mike_and_Tony/testEthFaucet/TestEthFaucet/src/App.js"],"names":["Donate","AttackCard","OutcomeCard","Web3","React","useState","useEffect","contractABI","App","contractAddress","defaultAccount","setDefaultAccount","contractBalance","setContractBalance","matchOutcome","setMatchOutcome","playerAttack","setPlayerAttack","computerAttack","setComputerAttack","RPSContract","setRPSContract","WEB3","setWEB3","loadAccount","web3","givenProvider","providers","WebsocketProvider","eth","getBalance","then","result","utils","fromWei","getAccounts","Contract","events","emitOutcome","filter","player","error","event","returnValues","outcome","emitDonation","defaultAttackProps","contract"],"mappings":"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","sourcesContent":["//import logo from './logo.svg';\nimport './App.css';\n//import Outcome from './Components/Outcome';\nimport Donate from './Components/Donate';\nimport AttackCard from './Components/AttackCard';\nimport OutcomeCard from './Components/OutcomeCard';\nimport Web3 from 'web3';\nimport React, {useState, useEffect} from 'react';\nimport contractABI from './ABI.json'  // Solidity contract ABI\n\nfunction App() {\n\n  const contractAddress = '0x5852ddEc9e0726Fe69935481804A7d0b21934E85';\n\n  // declare hook for setting the defaultAccount. App will re-render after calling setDefaultAccount(myNewDefaultAccount)\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [contractBalance, setContractBalance] = useState(null);\n\n  const [matchOutcome, setMatchOutcome] = useState(null);\n  const [playerAttack, setPlayerAttack] = useState(null);\n  const [computerAttack, setComputerAttack] = useState(null);\n\n  const [RPSContract, setRPSContract] = useState(null);\n\n  const [WEB3, setWEB3] = useState(null);\n\n  // initialize and set state of web3 and contract for uses in app\n  // initialize and set state of contract balance and default account\n  function loadAccount(){\n\n    let web3;\n\n    if(typeof web3 !== 'undefined'){\n      web3 = new Web3(Web3.givenProvider);\n      setWEB3(web3);\n    } else {\n      // IMPORTANT!!\n      // USED WebsocketProvider instead of httpProvider due to event listening only happening on ws\n      web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n      setWEB3(web3);\n    }\n\n    web3.eth.getBalance(contractAddress)\n    .then(function(result){\n      setContractBalance(web3.utils.fromWei(result));\n    });\n\n    web3.eth.getAccounts()\n    .then(function(result){\n      setDefaultAccount(result[0]);\n    });\n\n    setRPSContract(new web3.eth.Contract(contractABI, contractAddress));\n  }\n\n  // initialize web3 and provider connection upon app load\n  useEffect(() => {\n    loadAccount();\n  }, []);\n\n// Call when RPSContract is updated\n// sets the event listener and updates match outcome\n  useEffect(() => {\n\n    //checking for null values to prevent setting the event listener without values initialized\n    if(RPSContract !== null && defaultAccount !== null && WEB3 !== null) {\n\n      // listen for game outcomes where this user's address is the player, update outcome display values\n      RPSContract.events.emitOutcome({filter: {player: defaultAccount}}, function(error, event){\n      //console.log(event);\n      //console.log('event.returnValues.myDataPointName returned ' + event.returnValues.outcome);\n      setMatchOutcome(event.returnValues.outcome);\n      setPlayerAttack(event.returnValues.playerAttack);\n      setComputerAttack(event.returnValues.computerAttack);\n      //console.log('event player: ' + event.returnValues.player);\n      //console.log('dfAccount: ' + defaultAccount);\n    });\n\n      // listen to all outcome events, no filters. Update contract balance after each match played by anyone\n    RPSContract.events.emitOutcome({}, function(error, event){\n      WEB3.eth.getBalance(contractAddress)\n      .then(function(result){\n        setContractBalance(WEB3.utils.fromWei(result));\n      });\n    });\n\n      // update the contract balance whenever a donation event is emitted\n    RPSContract.events.emitDonation({}, function(error, event){\n      WEB3.eth.getBalance(contractAddress)\n      .then(function(result){\n        setContractBalance(WEB3.utils.fromWei(result));\n      });\n    });\n    }\n  }, [RPSContract, defaultAccount, WEB3]);\n\n  // package props for attack buttons (same props for all buttons)\n  let defaultAttackProps = {\n    contract: RPSContract,\n    defaultAccount: defaultAccount\n  }\n\nreturn (\n<div>\n<div className='Title'> <h2> Play Rock Paper Scissors for Rinkby Test Eth! </h2> \n  <p> Win to receive test Eth! </p>\n  </div>\n<div className='GameWrapper'>\n  <Donate contractBalance={contractBalance} {...defaultAttackProps}/>\n  <OutcomeCard outcome = {matchOutcome} playerAttack={playerAttack} computerAttack={computerAttack} />\n  <AttackCard {...defaultAttackProps}/>\n</div>\n<div>\n  <p> Donate to the creator: 0x07Fa7FBff22d6bBcC2f38A29F07B60ef5F4916b3 </p>\n  <a href='https://github.com/mikec3/TestEthFaucet'>GitHub</a>\n</div>\n</div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}