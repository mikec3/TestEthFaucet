{"ast":null,"code":"var _jsxFileName = \"/Users/michaelcouch/Documents/Ethereum/Mike_and_Tony/testEthFaucet/TestEthFaucet/src/App.js\",\n    _s = $RefreshSig$();\n\n//import logo from './logo.svg';\nimport './App.css'; //import Outcome from './Components/Outcome';\n\nimport Donate from './Components/Donate';\nimport AttackCard from './Components/AttackCard';\nimport OutcomeCard from './Components/OutcomeCard';\nimport Web3 from 'web3';\nimport React, { useState, useEffect } from 'react';\nimport contractABI from './ABI.json'; // Solidity contract ABI\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  console.log('window.ethereum: ' + window.ethereum);\n\n  const ethEnabled = async () => {\n    if (window.ethereum) {\n      await window.ethereum.send('eth_requestAccounts');\n      window.web3 = new Web3(window.ethereum);\n      console.log(window.web3);\n      return true;\n    }\n\n    return false;\n  };\n\n  console.log(ethEnabled());\n  const contractAddress = '0x5852ddEc9e0726Fe69935481804A7d0b21934E85'; // declare hook for setting the defaultAccount. App will re-render after calling setDefaultAccount(myNewDefaultAccount)\n\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [contractBalance, setContractBalance] = useState(null);\n  const [matchOutcome, setMatchOutcome] = useState(null);\n  const [playerAttack, setPlayerAttack] = useState(null);\n  const [computerAttack, setComputerAttack] = useState(null);\n  const [RPSContract, setRPSContract] = useState(null);\n  const [WEB3, setWEB3] = useState(null); // initialize and set state of web3 and contract for uses in app\n  // initialize and set state of contract balance and default account\n\n  function loadAccount() {\n    let web3;\n\n    if (typeof web3 !== 'undefined') {\n      web3 = new Web3(Web3.givenProvider);\n      setWEB3(web3);\n    } else {\n      // IMPORTANT!!\n      // USED WebsocketProvider instead of httpProvider due to event listening only happening on ws\n      web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n      setWEB3(web3);\n    }\n\n    web3.eth.getBalance(contractAddress).then(function (result) {\n      setContractBalance(web3.utils.fromWei(result));\n    });\n    web3.eth.getAccounts().then(function (result) {\n      setDefaultAccount(result[0]);\n    });\n    setRPSContract(new web3.eth.Contract(contractABI, contractAddress));\n  } // initialize web3 and provider connection upon app load\n\n\n  useEffect(() => {\n    loadAccount();\n  }, []); // Call when RPSContract is updated\n  // sets the event listener and updates match outcome\n\n  useEffect(() => {\n    //checking for null values to prevent setting the event listener without values initialized\n    if (RPSContract !== null && defaultAccount !== null && WEB3 !== null) {\n      // listen for game outcomes where this user's address is the player, update outcome display values\n      RPSContract.events.emitOutcome({\n        filter: {\n          player: defaultAccount\n        }\n      }, function (error, event) {\n        //console.log(event);\n        //console.log('event.returnValues.myDataPointName returned ' + event.returnValues.outcome);\n        setMatchOutcome(event.returnValues.outcome);\n        setPlayerAttack(event.returnValues.playerAttack);\n        setComputerAttack(event.returnValues.computerAttack); //console.log('event player: ' + event.returnValues.player);\n        //console.log('dfAccount: ' + defaultAccount);\n      }); // listen to all outcome events, no filters. Update contract balance after each match played by anyone\n\n      RPSContract.events.emitOutcome({}, function (error, event) {\n        WEB3.eth.getBalance(contractAddress).then(function (result) {\n          setContractBalance(WEB3.utils.fromWei(result));\n        });\n      }); // update the contract balance whenever a donation event is emitted\n\n      RPSContract.events.emitDonation({}, function (error, event) {\n        WEB3.eth.getBalance(contractAddress).then(function (result) {\n          setContractBalance(WEB3.utils.fromWei(result));\n        });\n      });\n    }\n  }, [RPSContract, defaultAccount, WEB3]); // package props for attack buttons (same props for all buttons)\n\n  let defaultAttackProps = {\n    contract: RPSContract,\n    defaultAccount: defaultAccount\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Title\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Play Rock Paper Scissors for Rinkby Test Eth! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Win to receive test Eth! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"GameWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Donate, {\n        contractBalance: contractBalance,\n        ...defaultAttackProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(OutcomeCard, {\n        outcome: matchOutcome,\n        playerAttack: playerAttack,\n        computerAttack: computerAttack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(AttackCard, { ...defaultAttackProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Donate to the creator: 0x07Fa7FBff22d6bBcC2f38A29F07B60ef5F4916b3 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://github.com/mikec3/TestEthFaucet\",\n        children: \"GitHub\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 1\n  }, this);\n}\n\n_s(App, \"nVenDMO0FYwFf+FilP0cLapXIzE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/michaelcouch/Documents/Ethereum/Mike_and_Tony/testEthFaucet/TestEthFaucet/src/App.js"],"names":["Donate","AttackCard","OutcomeCard","Web3","React","useState","useEffect","contractABI","App","console","log","window","ethereum","ethEnabled","send","web3","contractAddress","defaultAccount","setDefaultAccount","contractBalance","setContractBalance","matchOutcome","setMatchOutcome","playerAttack","setPlayerAttack","computerAttack","setComputerAttack","RPSContract","setRPSContract","WEB3","setWEB3","loadAccount","givenProvider","providers","WebsocketProvider","eth","getBalance","then","result","utils","fromWei","getAccounts","Contract","events","emitOutcome","filter","player","error","event","returnValues","outcome","emitDonation","defaultAttackProps","contract"],"mappings":";;;AAAA;AACA,OAAO,WAAP,C,CACA;;AACA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,YAAxB,C,CAAsC;;;;AAEtC,SAASC,GAAT,GAAe;AAAA;;AAEbC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAqBC,MAAM,CAACC,QAAxC;;AAEA,QAAMC,UAAU,GAAG,YAAY;AAC/B,QAAIF,MAAM,CAACC,QAAX,EAAqB;AACnB,YAAMD,MAAM,CAACC,QAAP,CAAgBE,IAAhB,CAAqB,qBAArB,CAAN;AACAH,MAAAA,MAAM,CAACI,IAAP,GAAc,IAAIZ,IAAJ,CAASQ,MAAM,CAACC,QAAhB,CAAd;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACI,IAAnB;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GARC;;AAUFN,EAAAA,OAAO,CAACC,GAAR,CAAYG,UAAU,EAAtB;AAEE,QAAMG,eAAe,GAAG,4CAAxB,CAhBa,CAkBb;;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACc,eAAD,EAAkBC,kBAAlB,IAAwCf,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAM,CAACgB,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACkB,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACoB,cAAD,EAAiBC,iBAAjB,IAAsCrB,QAAQ,CAAC,IAAD,CAApD;AAEA,QAAM,CAACsB,WAAD,EAAcC,cAAd,IAAgCvB,QAAQ,CAAC,IAAD,CAA9C;AAEA,QAAM,CAACwB,IAAD,EAAOC,OAAP,IAAkBzB,QAAQ,CAAC,IAAD,CAAhC,CA5Ba,CA8Bb;AACA;;AACA,WAAS0B,WAAT,GAAsB;AAEpB,QAAIhB,IAAJ;;AAEA,QAAG,OAAOA,IAAP,KAAgB,WAAnB,EAA+B;AAC7BA,MAAAA,IAAI,GAAG,IAAIZ,IAAJ,CAASA,IAAI,CAAC6B,aAAd,CAAP;AACAF,MAAAA,OAAO,CAACf,IAAD,CAAP;AACD,KAHD,MAGO;AACL;AACA;AACAA,MAAAA,IAAI,GAAG,IAAIZ,IAAJ,CAAS,IAAIA,IAAI,CAAC8B,SAAL,CAAeC,iBAAnB,CAAqC,qBAArC,CAAT,CAAP;AACAJ,MAAAA,OAAO,CAACf,IAAD,CAAP;AACD;;AAEDA,IAAAA,IAAI,CAACoB,GAAL,CAASC,UAAT,CAAoBpB,eAApB,EACCqB,IADD,CACM,UAASC,MAAT,EAAgB;AACpBlB,MAAAA,kBAAkB,CAACL,IAAI,CAACwB,KAAL,CAAWC,OAAX,CAAmBF,MAAnB,CAAD,CAAlB;AACD,KAHD;AAKAvB,IAAAA,IAAI,CAACoB,GAAL,CAASM,WAAT,GACCJ,IADD,CACM,UAASC,MAAT,EAAgB;AACpBpB,MAAAA,iBAAiB,CAACoB,MAAM,CAAC,CAAD,CAAP,CAAjB;AACD,KAHD;AAKAV,IAAAA,cAAc,CAAC,IAAIb,IAAI,CAACoB,GAAL,CAASO,QAAb,CAAsBnC,WAAtB,EAAmCS,eAAnC,CAAD,CAAd;AACD,GAzDY,CA2Db;;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACdyB,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT,CA5Da,CAgEf;AACA;;AACEzB,EAAAA,SAAS,CAAC,MAAM;AAEd;AACA,QAAGqB,WAAW,KAAK,IAAhB,IAAwBV,cAAc,KAAK,IAA3C,IAAmDY,IAAI,KAAK,IAA/D,EAAqE;AAEnE;AACAF,MAAAA,WAAW,CAACgB,MAAZ,CAAmBC,WAAnB,CAA+B;AAACC,QAAAA,MAAM,EAAE;AAACC,UAAAA,MAAM,EAAE7B;AAAT;AAAT,OAA/B,EAAmE,UAAS8B,KAAT,EAAgBC,KAAhB,EAAsB;AACzF;AACA;AACA1B,QAAAA,eAAe,CAAC0B,KAAK,CAACC,YAAN,CAAmBC,OAApB,CAAf;AACA1B,QAAAA,eAAe,CAACwB,KAAK,CAACC,YAAN,CAAmB1B,YAApB,CAAf;AACAG,QAAAA,iBAAiB,CAACsB,KAAK,CAACC,YAAN,CAAmBxB,cAApB,CAAjB,CALyF,CAMzF;AACA;AACD,OARC,EAHmE,CAanE;;AACFE,MAAAA,WAAW,CAACgB,MAAZ,CAAmBC,WAAnB,CAA+B,EAA/B,EAAmC,UAASG,KAAT,EAAgBC,KAAhB,EAAsB;AACvDnB,QAAAA,IAAI,CAACM,GAAL,CAASC,UAAT,CAAoBpB,eAApB,EACCqB,IADD,CACM,UAASC,MAAT,EAAgB;AACpBlB,UAAAA,kBAAkB,CAACS,IAAI,CAACU,KAAL,CAAWC,OAAX,CAAmBF,MAAnB,CAAD,CAAlB;AACD,SAHD;AAID,OALD,EAdqE,CAqBnE;;AACFX,MAAAA,WAAW,CAACgB,MAAZ,CAAmBQ,YAAnB,CAAgC,EAAhC,EAAoC,UAASJ,KAAT,EAAgBC,KAAhB,EAAsB;AACxDnB,QAAAA,IAAI,CAACM,GAAL,CAASC,UAAT,CAAoBpB,eAApB,EACCqB,IADD,CACM,UAASC,MAAT,EAAgB;AACpBlB,UAAAA,kBAAkB,CAACS,IAAI,CAACU,KAAL,CAAWC,OAAX,CAAmBF,MAAnB,CAAD,CAAlB;AACD,SAHD;AAID,OALD;AAMC;AACF,GAhCQ,EAgCN,CAACX,WAAD,EAAcV,cAAd,EAA8BY,IAA9B,CAhCM,CAAT,CAlEa,CAoGb;;AACA,MAAIuB,kBAAkB,GAAG;AACvBC,IAAAA,QAAQ,EAAE1B,WADa;AAEvBV,IAAAA,cAAc,EAAEA;AAFO,GAAzB;AAKF,sBACA;AAAA,4BACA;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,mCAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAxB,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAIA;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,eAAe,EAAEE,eAAzB;AAAA,WAA8CiC;AAA9C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AAAa,QAAA,OAAO,EAAI/B,YAAxB;AAAsC,QAAA,YAAY,EAAEE,YAApD;AAAkE,QAAA,cAAc,EAAEE;AAAlF;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,UAAD,OAAgB2B;AAAhB;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJA,eASA;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAG,QAAA,IAAI,EAAC,yCAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YATA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAgBC;;GA1HQ5C,G;;KAAAA,G;AA4HT,eAAeA,GAAf","sourcesContent":["//import logo from './logo.svg';\nimport './App.css';\n//import Outcome from './Components/Outcome';\nimport Donate from './Components/Donate';\nimport AttackCard from './Components/AttackCard';\nimport OutcomeCard from './Components/OutcomeCard';\nimport Web3 from 'web3';\nimport React, {useState, useEffect} from 'react';\nimport contractABI from './ABI.json'  // Solidity contract ABI\n\nfunction App() {\n\n  console.log('window.ethereum: '+ window.ethereum);\n\n  const ethEnabled = async () => {\n  if (window.ethereum) {\n    await window.ethereum.send('eth_requestAccounts');\n    window.web3 = new Web3(window.ethereum);\n    console.log(window.web3);\n    return true;\n  }\n  return false;\n}\n\nconsole.log(ethEnabled());\n\n  const contractAddress = '0x5852ddEc9e0726Fe69935481804A7d0b21934E85';\n\n  // declare hook for setting the defaultAccount. App will re-render after calling setDefaultAccount(myNewDefaultAccount)\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [contractBalance, setContractBalance] = useState(null);\n\n  const [matchOutcome, setMatchOutcome] = useState(null);\n  const [playerAttack, setPlayerAttack] = useState(null);\n  const [computerAttack, setComputerAttack] = useState(null);\n\n  const [RPSContract, setRPSContract] = useState(null);\n\n  const [WEB3, setWEB3] = useState(null);\n\n  // initialize and set state of web3 and contract for uses in app\n  // initialize and set state of contract balance and default account\n  function loadAccount(){\n\n    let web3;\n\n    if(typeof web3 !== 'undefined'){\n      web3 = new Web3(Web3.givenProvider);\n      setWEB3(web3);\n    } else {\n      // IMPORTANT!!\n      // USED WebsocketProvider instead of httpProvider due to event listening only happening on ws\n      web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n      setWEB3(web3);\n    }\n\n    web3.eth.getBalance(contractAddress)\n    .then(function(result){\n      setContractBalance(web3.utils.fromWei(result));\n    });\n\n    web3.eth.getAccounts()\n    .then(function(result){\n      setDefaultAccount(result[0]);\n    });\n\n    setRPSContract(new web3.eth.Contract(contractABI, contractAddress));\n  }\n\n  // initialize web3 and provider connection upon app load\n  useEffect(() => {\n    loadAccount();\n  }, []);\n\n// Call when RPSContract is updated\n// sets the event listener and updates match outcome\n  useEffect(() => {\n\n    //checking for null values to prevent setting the event listener without values initialized\n    if(RPSContract !== null && defaultAccount !== null && WEB3 !== null) {\n\n      // listen for game outcomes where this user's address is the player, update outcome display values\n      RPSContract.events.emitOutcome({filter: {player: defaultAccount}}, function(error, event){\n      //console.log(event);\n      //console.log('event.returnValues.myDataPointName returned ' + event.returnValues.outcome);\n      setMatchOutcome(event.returnValues.outcome);\n      setPlayerAttack(event.returnValues.playerAttack);\n      setComputerAttack(event.returnValues.computerAttack);\n      //console.log('event player: ' + event.returnValues.player);\n      //console.log('dfAccount: ' + defaultAccount);\n    });\n\n      // listen to all outcome events, no filters. Update contract balance after each match played by anyone\n    RPSContract.events.emitOutcome({}, function(error, event){\n      WEB3.eth.getBalance(contractAddress)\n      .then(function(result){\n        setContractBalance(WEB3.utils.fromWei(result));\n      });\n    });\n\n      // update the contract balance whenever a donation event is emitted\n    RPSContract.events.emitDonation({}, function(error, event){\n      WEB3.eth.getBalance(contractAddress)\n      .then(function(result){\n        setContractBalance(WEB3.utils.fromWei(result));\n      });\n    });\n    }\n  }, [RPSContract, defaultAccount, WEB3]);\n\n  // package props for attack buttons (same props for all buttons)\n  let defaultAttackProps = {\n    contract: RPSContract,\n    defaultAccount: defaultAccount\n  }\n\nreturn (\n<div>\n<div className='Title'> <h2> Play Rock Paper Scissors for Rinkby Test Eth! </h2> \n  <p> Win to receive test Eth! </p>\n  </div>\n<div className='GameWrapper'>\n  <Donate contractBalance={contractBalance} {...defaultAttackProps}/>\n  <OutcomeCard outcome = {matchOutcome} playerAttack={playerAttack} computerAttack={computerAttack} />\n  <AttackCard {...defaultAttackProps}/>\n</div>\n<div>\n  <p> Donate to the creator: 0x07Fa7FBff22d6bBcC2f38A29F07B60ef5F4916b3 </p>\n  <a href='https://github.com/mikec3/TestEthFaucet'>GitHub</a>\n</div>\n</div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}