{"ast":null,"code":"var _jsxFileName = \"/Users/michaelcouch/Documents/Ethereum/Mike_and_Tony/testEthFaucet/TestEthFaucet/src/App.js\",\n    _s = $RefreshSig$();\n\n//import logo from './logo.svg';\nimport './App.css'; //import Outcome from './Components/Outcome';\n\nimport Donate from './Components/Donate';\nimport AttackCard from './Components/AttackCard';\nimport OutcomeCard from './Components/OutcomeCard';\nimport Web3 from 'web3';\nimport React, { useState, useEffect } from 'react';\nimport contractABI from './ABI.json'; // Solidity contract ABI\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // ROPSTEN ADDRESS = '0x266B6F8C7C823187d20FEBD47F684F348843501a'\n  const contractAddress = '0x266B6F8C7C823187d20FEBD47F684F348843501a'; // declare hook for setting the defaultAccount. App will re-render after calling setDefaultAccount(myNewDefaultAccount)\n\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [contractBalance, setContractBalance] = useState(null);\n  const [matchOutcome, setMatchOutcome] = useState(null);\n  const [playerAttack, setPlayerAttack] = useState(null);\n  const [computerAttack, setComputerAttack] = useState(null);\n  const [RPSContract, setRPSContract] = useState(null); // initialize and set state of web3 and contract for uses in app\n  // initialize and set state of contract balance and default account\n\n  function loadAccount() {\n    if (window.ethereum && window.ethereum.isMetaMask) {\n      console.log('MetaMask detected');\n      window.web3 = new Web3(window.ethereum);\n      window.ethereum.send('eth_requestAccounts').then(function (result) {\n        console.log(result.result[0]);\n        setDefaultAccount(result.result[0]);\n        window.web3.eth.getBalance(contractAddress).then(function (result) {\n          setContractBalance(window.web3.utils.fromWei(result));\n        });\n        setRPSContract(new window.web3.eth.Contract(contractABI, contractAddress));\n      });\n    } else {\n      alert(\"You need to install MetaMask to interact with this app\");\n    } //   let web3;\n    //   if(typeof web3 !== 'undefined'){\n    //     web3 = new Web3(Web3.givenProvider);\n    //     setWEB3(web3);\n    //   } else {\n    //     // IMPORTANT!!\n    //     // USED WebsocketProvider instead of httpProvider due to event listening only happening on ws\n    //     web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n    //     setWEB3(web3);\n    //   }\n    //   web3.eth.getBalance(contractAddress)\n    //   .then(function(result){\n    //     setContractBalance(web3.utils.fromWei(result));\n    //   });\n    //   web3.eth.getAccounts()\n    //   .then(function(result){\n    //     setDefaultAccount(result[0]);\n    //   });\n    //   setRPSContract(new web3.eth.Contract(contractABI, contractAddress));\n\n  } // initialize web3 and provider connection upon app load\n\n\n  useEffect(() => {\n    loadAccount();\n  }, []); // Call when RPSContract is updated\n  // sets the event listener and updates match outcome\n\n  useEffect(() => {\n    //checking for null values to prevent setting the event listener without values initialized\n    if (RPSContract !== null && defaultAccount !== null && window.web3 !== null) {\n      // listen for game outcomes where this user's address is the player, update outcome display values\n      RPSContract.events.emitOutcome({\n        filter: {\n          player: defaultAccount\n        }\n      }, function (error, event) {\n        //console.log(event);\n        //console.log('event.returnValues.myDataPointName returned ' + event.returnValues.outcome);\n        setMatchOutcome(event.returnValues.outcome);\n        setPlayerAttack(event.returnValues.playerAttack);\n        setComputerAttack(event.returnValues.computerAttack); //console.log('event player: ' + event.returnValues.player);\n        //console.log('dfAccount: ' + defaultAccount);\n      }); // listen to all outcome events, no filters. Update contract balance after each match played by anyone\n\n      RPSContract.events.emitOutcome({}, function (error, event) {\n        window.web3.eth.getBalance(contractAddress).then(function (result) {\n          setContractBalance(window.web3.utils.fromWei(result));\n        });\n      }); // update the contract balance whenever a donation event is emitted\n\n      RPSContract.events.emitDonation({}, function (error, event) {\n        window.web3.eth.getBalance(contractAddress).then(function (result) {\n          setContractBalance(window.web3.utils.fromWei(result));\n        });\n      });\n    }\n  }, [RPSContract, defaultAccount]); // package props for attack buttons (same props for all buttons)\n\n  let defaultAttackProps = {\n    contract: RPSContract,\n    defaultAccount: defaultAccount\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Title\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Play Rock Paper Scissors for Ropsten Test Eth! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"GameWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Donate, {\n        contractBalance: contractBalance,\n        ...defaultAttackProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(OutcomeCard, {\n        outcome: matchOutcome,\n        playerAttack: playerAttack,\n        computerAttack: computerAttack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(AttackCard, { ...defaultAttackProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://github.com/mikec3/TestEthFaucet\",\n        children: \"GitHub\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Donate to the creator: 0x07Fa7FBff22d6bBcC2f38A29F07B60ef5F4916b3 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 1\n  }, this);\n}\n\n_s(App, \"N941AcBJCvim3VdcEF5Ph2Sm+OM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/michaelcouch/Documents/Ethereum/Mike_and_Tony/testEthFaucet/TestEthFaucet/src/App.js"],"names":["Donate","AttackCard","OutcomeCard","Web3","React","useState","useEffect","contractABI","App","contractAddress","defaultAccount","setDefaultAccount","contractBalance","setContractBalance","matchOutcome","setMatchOutcome","playerAttack","setPlayerAttack","computerAttack","setComputerAttack","RPSContract","setRPSContract","loadAccount","window","ethereum","isMetaMask","console","log","web3","send","then","result","eth","getBalance","utils","fromWei","Contract","alert","events","emitOutcome","filter","player","error","event","returnValues","outcome","emitDonation","defaultAttackProps","contract"],"mappings":"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","sourcesContent":["//import logo from './logo.svg';\nimport './App.css';\n//import Outcome from './Components/Outcome';\nimport Donate from './Components/Donate';\nimport AttackCard from './Components/AttackCard';\nimport OutcomeCard from './Components/OutcomeCard';\nimport Web3 from 'web3';\nimport React, {useState, useEffect} from 'react';\nimport contractABI from './ABI.json'  // Solidity contract ABI\n\nfunction App() {\n\n  // ROPSTEN ADDRESS = '0x266B6F8C7C823187d20FEBD47F684F348843501a'\n  const contractAddress = '0x266B6F8C7C823187d20FEBD47F684F348843501a';\n\n  // declare hook for setting the defaultAccount. App will re-render after calling setDefaultAccount(myNewDefaultAccount)\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [contractBalance, setContractBalance] = useState(null);\n\n  const [matchOutcome, setMatchOutcome] = useState(null);\n  const [playerAttack, setPlayerAttack] = useState(null);\n  const [computerAttack, setComputerAttack] = useState(null);\n\n  const [RPSContract, setRPSContract] = useState(null);\n\n  // initialize and set state of web3 and contract for uses in app\n  // initialize and set state of contract balance and default account\n  function loadAccount(){\n\n    if (window.ethereum && window.ethereum.isMetaMask) {\n      console.log('MetaMask detected');\n      window.web3 = new Web3(window.ethereum);\n      window.ethereum.send('eth_requestAccounts')\n      .then(function(result){\n        console.log(result.result[0]);\n        setDefaultAccount(result.result[0]);\n\n    window.web3.eth.getBalance(contractAddress)\n    .then(function(result){\n    setContractBalance(window.web3.utils.fromWei(result));\n    });\n\n    setRPSContract(new window.web3.eth.Contract(contractABI, contractAddress));\n\n      })\n    } else {\n      alert(\"You need to install MetaMask to interact with this app\");\n    }\n\n  //   let web3;\n\n  //   if(typeof web3 !== 'undefined'){\n  //     web3 = new Web3(Web3.givenProvider);\n  //     setWEB3(web3);\n  //   } else {\n  //     // IMPORTANT!!\n  //     // USED WebsocketProvider instead of httpProvider due to event listening only happening on ws\n  //     web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n  //     setWEB3(web3);\n  //   }\n\n  //   web3.eth.getBalance(contractAddress)\n  //   .then(function(result){\n  //     setContractBalance(web3.utils.fromWei(result));\n  //   });\n\n  //   web3.eth.getAccounts()\n  //   .then(function(result){\n  //     setDefaultAccount(result[0]);\n  //   });\n\n  //   setRPSContract(new web3.eth.Contract(contractABI, contractAddress));\n  }\n\n  // initialize web3 and provider connection upon app load\n  useEffect(() => {\n    loadAccount();\n  }, []);\n\n// Call when RPSContract is updated\n// sets the event listener and updates match outcome\n  useEffect(() => {\n\n    //checking for null values to prevent setting the event listener without values initialized\n    if(RPSContract !== null && defaultAccount !== null && window.web3 !== null) {\n\n      // listen for game outcomes where this user's address is the player, update outcome display values\n      RPSContract.events.emitOutcome({filter: {player: defaultAccount}}, function(error, event){\n      //console.log(event);\n      //console.log('event.returnValues.myDataPointName returned ' + event.returnValues.outcome);\n      setMatchOutcome(event.returnValues.outcome);\n      setPlayerAttack(event.returnValues.playerAttack);\n      setComputerAttack(event.returnValues.computerAttack);\n      //console.log('event player: ' + event.returnValues.player);\n      //console.log('dfAccount: ' + defaultAccount);\n    });\n\n      // listen to all outcome events, no filters. Update contract balance after each match played by anyone\n    RPSContract.events.emitOutcome({}, function(error, event){\n      window.web3.eth.getBalance(contractAddress)\n      .then(function(result){\n        setContractBalance(window.web3.utils.fromWei(result));\n      });\n    });\n\n      // update the contract balance whenever a donation event is emitted\n    RPSContract.events.emitDonation({}, function(error, event){\n      window.web3.eth.getBalance(contractAddress)\n      .then(function(result){\n        setContractBalance(window.web3.utils.fromWei(result));\n      });\n    });\n    }\n  }, [RPSContract, defaultAccount]);\n\n  // package props for attack buttons (same props for all buttons)\n  let defaultAttackProps = {\n    contract: RPSContract,\n    defaultAccount: defaultAccount\n  }\n\nreturn (\n<div>\n<div className='Title'> <h2> Play Rock Paper Scissors for Ropsten Test Eth! </h2> \n  </div>\n<div className='GameWrapper'>\n  <Donate contractBalance={contractBalance} {...defaultAttackProps}/>\n  <OutcomeCard outcome = {matchOutcome} playerAttack={playerAttack} computerAttack={computerAttack} />\n  <AttackCard {...defaultAttackProps}/>\n</div>\n<div>\n<a href='https://github.com/mikec3/TestEthFaucet'>GitHub</a>\n  <p> Donate to the creator: 0x07Fa7FBff22d6bBcC2f38A29F07B60ef5F4916b3 </p>\n</div>\n</div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}